package com.learning.scala_slides2

/**
 * Анонимные функции
 */
object Source3 {

  def main(args: Array[String]): Unit = {
    println( "sumFunc = " + sumFunc )
    println( "sumMeta1 = " + sumMeta1(1,2,sumFunc) )                 // (обычный вариант) когда анонимная функция определяющая тип перегруженной функции находится в переменной...
    println( "sumMeta1 = " + sumMeta1(1,2,(x: Int, y: Int) => x+y) ) // (вариант) когда на лету определяем анонимную функцию что определяет тип перегруженной функции...
    println( "sumMeta1 = " + sumMeta1(1,2,(x,y) => x+y) )            // вариант-1 когда Scala-компилятор сам умеет находить тип по перечисленным параметрам...
    println( "sumMeta1 = " + sumMeta1(1,2,_+_) )                     // вариант-2 когда Scala-компилятор сам умеет находить параметры и тип по этим параметрам...
  }

  val sumFunc = (x: Int, y: Int) => x+y                              // (обычный способ) определяем аннонимную переменую для конкретного типа функции...
  def sumMeta1(x: Int, y: Int, sumF: ((Int,Int) => Int)) = sumF(x,y) // (обычный способ) вынесли вызов типа перегруженной функции...

}
